create table "public"."chat_message" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp with time zone not null default now(),
    "userId" integer not null,
    "message" text not null,
    "tourneyId" integer not null
);


alter table "public"."chat_message" enable row level security;

CREATE UNIQUE INDEX chat_pkey ON public.chat_message USING btree (id);

alter table "public"."chat_message" add constraint "chat_pkey" PRIMARY KEY using index "chat_pkey";

alter table "public"."chat_message" add constraint "chat_message_tourneyId_fkey" FOREIGN KEY ("tourneyId") REFERENCES tourney(id) not valid;

alter table "public"."chat_message" validate constraint "chat_message_tourneyId_fkey";

alter table "public"."chat_message" add constraint "chat_message_userId_fkey" FOREIGN KEY ("userId") REFERENCES gd_user(id) not valid;

alter table "public"."chat_message" validate constraint "chat_message_userId_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.trigger_mod_created_at()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  NEW."createdAt" = NOW();
  RETURN NEW;
END;
$function$
;

create policy "authenticated users can select chat messages"
on "public"."chat_message"
as permissive
for select
to authenticated
using (true);


create policy "users can insert their own chat messages"
on "public"."chat_message"
as permissive
for insert
to public
with check (is_user("userId"));


CREATE TRIGGER handle_created_at BEFORE INSERT ON public.chat_message FOR EACH ROW EXECUTE FUNCTION trigger_mod_created_at();


